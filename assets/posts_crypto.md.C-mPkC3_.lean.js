import{_ as d,c as g,ad as n,a as l,l as t,L as i,b as a,V as s,o as u}from"./chunks/framework.aYmOcSUd.js";const x=JSON.parse('{"title":"加密与应用","description":"本文主要讲述 web 加密基本概念。","frontmatter":{"date":"2025-01-06T00:00:00.000Z","title":"加密与应用","category":"安全","tags":["加密","crypto"],"description":"本文主要讲述 web 加密基本概念。"},"headers":[],"relativePath":"posts/crypto.md","filePath":"posts/crypto.md"}'),p={name:"posts/crypto.md"};function h(c,o,m,b,q,f){const r=s("Image"),e=s("ClientOnly");return u(),g("div",null,[o[14]||(o[14]=n('<h1 id="加密与应用" tabindex="-1">加密与应用 <a class="header-anchor" href="#加密与应用" aria-label="Permalink to &quot;加密与应用&quot;">​</a></h1><h2 id="什么是加密" tabindex="-1">什么是加密 <a class="header-anchor" href="#什么是加密" aria-label="Permalink to &quot;什么是加密&quot;">​</a></h2><p>数据加密是一种信息安全关键技术，通过使用特定的<strong>加密算法</strong>和<strong>密钥</strong>将原始的、可读的<strong>明文</strong>数据转化为看似随机且不可读的<strong>密文数据</strong>，以确保数据在传输过程中或静止状态下不被未经授权的第三方获取或解读。</p><p>简单来讲<code>加（解）密</code>就是<code>锁（算法）</code>和<code>解锁（密钥）</code>的过程。</p><h2 id="为什么要加密" tabindex="-1">为什么要加密 <a class="header-anchor" href="#为什么要加密" aria-label="Permalink to &quot;为什么要加密&quot;">​</a></h2><p>我们思考这样一个场景。小明想给小强发一封信，但是不想让其他人知道信的内容，如果不对信的内容进行加密，那么信的内容很容易被邮递员知道。</p>',6)),l("p",null,[t(e,null,{default:i(()=>[t(r,{src:"/img/post/crypto/01.jpg",alt:"","preview-mask":!1})]),_:1})]),o[15]||(o[15]=l("h2",{id:"一个简单的加密",tabindex:"-1"},[a("一个简单的加密 "),l("a",{class:"header-anchor",href:"#一个简单的加密","aria-label":'Permalink to "一个简单的加密"'},"​")],-1)),o[16]||(o[16]=l("p",null,[a("聪明的小明将信中的每一个字母在26个字母表中分别向后取一位，比如 "),l("code",null,"node"),a(" 会变成 "),l("code",null,"opef"),a("，这样其他人就不知道信中的内容了。")],-1)),l("p",null,[t(e,null,{default:i(()=>[t(r,{src:"/img/post/crypto/02.jpg",alt:"","preview-mask":!1})]),_:1})]),o[17]||(o[17]=n('<p>这个故事中：</p><ul><li>向后偏移一个字母就是一种 <code>加密算法</code></li><li><code>node</code> 就是 <code>明文</code></li><li><code>opef</code> 就是 <code>密文</code></li></ul><p>这个加密方式就是著名的<code>恺撒加密</code>，是一种<code>对称加密</code>。</p><h2 id="遇到了问题" tabindex="-1">遇到了问题 <a class="header-anchor" href="#遇到了问题" aria-label="Permalink to &quot;遇到了问题&quot;">​</a></h2><p>没过多久，小明发现这种事先与小强约定好的加密方式很快被邮递员发现。于是小明又想了一个新的办法，小明让小强制作了一个有2个锁的邮箱，一个口只能进，一个口只能出。每次自己写好信便打开盒子的进信口投进去，让邮递员把盒子给小强，小强拿到盒子后打开出信口便能够看到内容。</p>',5)),l("p",null,[t(e,null,{default:i(()=>[t(r,{src:"/img/post/crypto/03.jpg",alt:"","preview-mask":!1})]),_:1})]),o[18]||(o[18]=n('<p>这个故事中：</p><ul><li>拥有两个锁的邮箱相当于 <code>加密算法</code></li><li><code>原始信件</code> 就是 <code>明文</code></li><li><code>放到邮箱中的信件</code> 就是 <code>密文</code></li></ul><p>其中<code>公钥</code>是公开的，而<code>私钥</code>只有小强一个人有，任何人都可以复制一份，这种加密方式叫 <code>非对称加密</code>。</p><h2 id="小强的回信" tabindex="-1">小强的回信 <a class="header-anchor" href="#小强的回信" aria-label="Permalink to &quot;小强的回信&quot;">​</a></h2><p>由于<code>公钥</code>是公开的，小强为了确保通知小明自己收到的是小明的信，而不是邮递员伪造的，决定采用<code>数字签名</code>的方式回信。</p>',5)),l("ol",null,[l("li",null,[o[0]||(o[0]=a("小强对很长的信先用")),o[1]||(o[1]=l("code",null,"Hash",-1)),o[2]||(o[2]=a("函数，生成信件的摘要（digest）。（这个过程可以简单的理解为压缩） ")),t(e,null,{default:i(()=>[t(r,{src:"/img/post/crypto/04.jpg",alt:"","preview-mask":!1})]),_:1})]),l("li",null,[o[3]||(o[3]=a('然后，小强使用私钥，对这个摘要（digest）加密，生成"数字签名"（signature）。 ')),t(e,null,{default:i(()=>[t(r,{src:"/img/post/crypto/05.jpg",alt:"","preview-mask":!1})]),_:1})]),l("li",null,[o[4]||(o[4]=a("小强将这个签名，附在信件下面，一起发给小明。 ")),t(e,null,{default:i(()=>[t(r,{src:"/img/post/crypto/06.jpg",alt:"","preview-mask":!1})]),_:1})]),l("li",null,[o[5]||(o[5]=a("小明收信后，取下数字签名，用小强的公钥解密，得到信件的摘要。 ")),t(e,null,{default:i(()=>[t(r,{src:"/img/post/crypto/07.jpg",alt:"","preview-mask":!1})]),_:1})]),l("li",null,[o[6]||(o[6]=a("小明再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要（digest）进行对比。如果两者一致，就证明这封信未被修改过。由此证明，这封信确实是小强发出的。 ")),t(e,null,{default:i(()=>[t(r,{src:"/img/post/crypto/08.jpg",alt:"","preview-mask":!1})]),_:1}),o[7]||(o[7]=a(" 小强对回信的认证过程就是")),o[8]||(o[8]=l("code",null,"数字签名",-1)),o[9]||(o[9]=a("，主要目的是确定")),o[10]||(o[10]=l("code",null,"内容的完整性",-1)),o[11]||(o[11]=a("和")),o[12]||(o[12]=l("code",null,"内容的发送方",-1)),o[13]||(o[13]=a("是否是正确的。"))])]),o[19]||(o[19]=n('<h2 id="新的问题" tabindex="-1">新的问题 <a class="header-anchor" href="#新的问题" aria-label="Permalink to &quot;新的问题&quot;">​</a></h2><p>有一天邮递员潜入小强的家中，把小强的<code>公钥</code>、<code>私钥</code>换成自己制作的<code>公钥</code>、<code>私钥</code>了，并一直冒充小明与小强进行进行通信。时间久了小明发现小强一直没有真正收到自己的信，于是小明想到一个办法。小明让小强找<code>&quot;证书中心&quot;（certificate authority，简称CA）</code>，为公钥做认证。证书中心用自己的私钥，对小明的公钥和一些相关信息一起加密，生成&quot;数字证书&quot;（Digital Certificate）。</p><h2 id="加密都有哪些方式" tabindex="-1">加密都有哪些方式 <a class="header-anchor" href="#加密都有哪些方式" aria-label="Permalink to &quot;加密都有哪些方式&quot;">​</a></h2><p>通过上面的故事我们了解到，加密主要分为两大类：<code>对称加密</code>、<code>非对称加密</code>。</p><h3 id="对称加密" tabindex="-1">对称加密 <a class="header-anchor" href="#对称加密" aria-label="Permalink to &quot;对称加密&quot;">​</a></h3><p>对称密钥加密使用共享的单个密钥进行加密和解密。在对称加密中，加密消息的发送者和接收者都可以访问相同的密钥。</p><h4 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h4><ul><li>加密速度快，适合大量数据的加密。</li><li>密钥管理较为困难，因为双方必须安全地共享同一把密钥。</li><li>安全性依赖于密钥的安全性，一旦密钥泄露，加密信息就可能被破解。</li></ul><h4 id="常见算法" tabindex="-1">常见算法 <a class="header-anchor" href="#常见算法" aria-label="Permalink to &quot;常见算法&quot;">​</a></h4><ul><li>AES（Advanced Encryption Standard）高级加密标准</li><li>DES（Data Encryption Standard）数据加密标准</li><li>3DES（Triple Data Encryption Algorithm）三重数据加密算法</li><li>RC4（Rivest Cipher 4）</li></ul><h4 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><ul><li>密码加解密</li><li>文件加解密</li></ul><h4 id="对称加密过程" tabindex="-1">对称加密过程 <a class="header-anchor" href="#对称加密过程" aria-label="Permalink to &quot;对称加密过程&quot;">​</a></h4><p>对称加密整个流程如下：</p><ol><li><strong>生成共享密钥</strong>，一份给<strong>加密方</strong>，一份给<strong>解密方</strong></li><li>使用<strong>共享密钥</strong>对<strong>明文</strong>进行<strong>加密</strong></li><li>使用<strong>密文</strong>进行<strong>传输</strong></li><li>使用<strong>共享密钥</strong>对<strong>密文</strong>进行<strong>解密</strong></li></ol><blockquote><p>共享密钥 + 加密算法 =&gt; 密文 密文 + 解密算法 =&gt; 明文</p></blockquote><p>可以看到整个加密过程是非常简单的，其中<strong>共享密钥</strong>、<strong>加密算法</strong>是公开的，所以为什么说<strong>对称加密</strong>是&quot;不安全&quot;的，其实指的是在网络传输过程，由于<strong>前端代码</strong>是暴露在客户端的，所以<strong>黑客</strong>很容易从<strong>前端代码</strong>或<strong>网络拦截</strong>中获取到<strong>共享密钥</strong>和<strong>加密算法</strong>从而对用户提交的敏感信息如：<strong>密码</strong>、<strong>个人信息</strong>进行拦截收集。</p><h3 id="非对称加密" tabindex="-1">非对称加密 <a class="header-anchor" href="#非对称加密" aria-label="Permalink to &quot;非对称加密&quot;">​</a></h3><p>非对称加密（也称为公钥加密）使用一个私钥和一个公钥。使用公钥和私钥加密的数据需要公钥和接收者的私钥才能解密。</p><h4 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-label="Permalink to &quot;特点&quot;">​</a></h4><ul><li>加密速度较慢，不适合大量数据的直接加密。</li><li>密钥管理相对容易，因为公钥可以公开发布，而私钥则保持私密。</li><li>提供了更好的安全性，即使公钥被广泛传播，只要私钥不被泄露，信息就是安全的。</li></ul><h4 id="常见算法-1" tabindex="-1">常见算法 <a class="header-anchor" href="#常见算法-1" aria-label="Permalink to &quot;常见算法&quot;">​</a></h4><ul><li>RSA（Rivest-Shamir-Adleman）</li><li>ECC（Elliptic Curve Cryptography）椭圆曲线密码学</li><li>DSA（Digital Signature Algorithm）数字签名算法</li></ul><h4 id="应用场景-1" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-1" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><ul><li>密钥交换，例如在建立安全通信之前交换对称加密使用的密钥。</li><li>数字签名，确保信息的完整性和来源的真实性。</li></ul><h4 id="对非称加密过程" tabindex="-1">对非称加密过程 <a class="header-anchor" href="#对非称加密过程" aria-label="Permalink to &quot;对非称加密过程&quot;">​</a></h4><p>非对称加密整个流程如下：</p><ol><li><strong>生成一对公私钥</strong>，公钥给<strong>加密方</strong>，私钥给<strong>解密方</strong></li><li>使用<strong>公钥</strong>对<strong>明文</strong>进行<strong>加密</strong></li><li>使用<strong>密文</strong>进行<strong>传输</strong></li><li>使用<strong>私钥</strong>对<strong>密文</strong>进行<strong>解密</strong></li></ol><p>非对称加密也是一样的道理，其中<strong>公钥</strong>、<strong>加密算法</strong>是公开的，<strong>私钥</strong>是不需要进行传输的，所以<strong>非对称加密</strong>过程中<strong>私钥的保密性</strong>是<strong>安全</strong>的关键。</p><h2 id="加密过程中的其他知识点" tabindex="-1">加密过程中的其他知识点 <a class="header-anchor" href="#加密过程中的其他知识点" aria-label="Permalink to &quot;加密过程中的其他知识点&quot;">​</a></h2><p>在复杂的加密过程中还涉及到<code>Hash</code>算法、<code>密钥交换</code>算法、<code>加解密</code>算法、<code>编码</code>。</p><h2 id="哈希-hash" tabindex="-1">哈希（Hash） <a class="header-anchor" href="#哈希-hash" aria-label="Permalink to &quot;哈希（Hash）&quot;">​</a></h2><p>哈希（Hash）是一种数据结构和算法，它能够将任意长度的输入（通常是字符串）通过特定的算法转换成固定长度的输出，这个输出被称为哈希值、散列值、哈希码或消息摘要。</p><h3 id="特点-2" tabindex="-1">特点 <a class="header-anchor" href="#特点-2" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li><p>固定长度输出： 不论输入数据的大小如何，哈希算法都会产生一个固定长度的输出。例如，SHA-256算法总是产生256位（32字节）的哈希值。</p></li><li><p>不可逆性： 哈希算法是单向函数，从哈希值很难逆向推导出原始输入数据。这使得哈希在密码学中非常有用，特别是在存储密码时。</p></li><li><p>唯一性： 理想情况下，不同的输入应该产生不同的哈希值。然而，由于输出空间有限，不同输入可能会产生相同的哈希值，这称为哈希碰撞。优秀的哈希算法应尽量减少碰撞的发生。</p></li><li><p>高效性： 哈希算法能够在较短的时间内计算出哈希值，即使对于大量的数据也是如此。这使得哈希在实时应用中非常实用。</p></li><li><p>敏感性： 即使输入数据的微小变化，也会导致哈希值发生显著的变化。这种特性使得哈希在数据完整性检查中非常有效。</p></li></ul><h3 id="常见算法-2" tabindex="-1">常见算法 <a class="header-anchor" href="#常见算法-2" aria-label="Permalink to &quot;常见算法&quot;">​</a></h3><ul><li>MD5 (Message-Digest Algorithm 5)</li><li>SHA-256 (Secure Hash Algorithm 256)</li><li>BLAKE2</li></ul><h3 id="应用场景-2" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-2" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li>生成摘要</li><li>密码存储</li></ul><h2 id="编码" tabindex="-1">编码 <a class="header-anchor" href="#编码" aria-label="Permalink to &quot;编码&quot;">​</a></h2><p>编码是信息从一种形式或格式转换为另一种形式的过程，也称为计算机编程语言的代码简称编码。</p><h3 id="特点-3" tabindex="-1">特点 <a class="header-anchor" href="#特点-3" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li><p>标准化： 许多编码标准已经被国际组织（如ISO、IEEE等）认可，确保了不同系统之间的兼容性和互操作性。</p></li><li><p>安全性： 通过加密算法对数据进行编码，可以保护敏感信息不被未授权访问。</p></li><li><p>效率： 适当的编码可以减少存储空间的需求或加快数据传输速度。</p></li><li><p>可扩展性： 好的编码设计应该支持未来的发展和技术进步。</p></li><li><p>易解析性： 编码后的数据应易于计算机处理和解析。</p></li></ul><h3 id="常见编码" tabindex="-1">常见编码 <a class="header-anchor" href="#常见编码" aria-label="Permalink to &quot;常见编码&quot;">​</a></h3><ul><li>ASCII（American Standard Code for Information Interchange）</li><li>Unicode</li><li>UTF-8 (8-bit UCS/Unicode Transformation Format)</li></ul><h3 id="应用场景-3" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-3" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li>数据交换和传输</li><li>文本文件存储</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li>涉及到<strong>敏感信息</strong>的地方，都应该考虑使用加密技术来提高<strong>安全性</strong>。</li><li>对称加密的<strong>密钥</strong>和非对称加密<strong>私钥</strong>的<strong>保密性</strong>是保证加解密过程安全的关键。</li><li>非对称加密中 <ul><li>加密场景，希望只有我才能解密，别人只能加密。即<strong>公钥加密，私钥解密</strong>。</li><li>签名场景，希望只能我才能签名，别人只能验证。即<strong>私钥签名，公钥验签</strong></li></ul></li><li><strong>数字签名</strong>使用私钥对数据摘要进行签名，并附带和数据一起发送，可以起到防篡改、防伪装、防否认的作用。</li><li><strong>哈希</strong>可以压缩信息长度且与原始数据产生唯一映射关系，起到减少信息提高性能和防止第三方使用公钥解开签名后，拿到原始数据的作用。</li><li><strong>证书中心</strong>负责验证申请证书的个人、组织或网站的身份信息，确保这些信息的真实性和合法性，起到公证的作用。</li><li><strong>编码</strong>可以统一不同系统、不同开发语言标准。</li></ol>',49))])}const P=d(p,[["render",h]]);export{x as __pageData,P as default};
